name: CD BACKEND NEOS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH keys
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 2048 -f ~/.ssh/blume_key.pem -N ""
          chmod 600 ~/.ssh/blume_key.pem
          chmod 644 ~/.ssh/blume_key.pem.pub
          chmod 700 ~/.ssh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Add hostname to /etc/hosts
        run: |
          echo "127.0.0.1 workstation" | sudo tee -a /etc/hosts
          cat /etc/hosts

      - name: Verify and add the public machine's SSH key
        env:
          PUBLIC_IP: ${{ secrets.CLEAN_PUBLIC_IP }}
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -H $PUBLIC_IP >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts
          # Adding the `-o StrictHostKeyChecking=no` option to avoid verification prompt
          sudo ssh -i ~/.ssh/blume_key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP

      - name: Copy SSH key PEM PUB to the jump server
        env:
          PUBLIC_IP: ${{ secrets.CLEAN_PUBLIC_IP }}
        run: |
          sudo ssh-copy-id -i ~/.ssh/blume_key.pem.pub ubuntu@$PUBLIC_IP
          echo "Chave pública copiada para o jump server com sucesso."

      - name: Deploy Docker image to backend servers
        env:
          PUBLIC_IP: ${{ secrets.PUBLIC_IP }}
          BACKEND_IP_1: ${{ secrets.PRIVATE_IP_1 }}
          BACKEND_IP_2: ${{ secrets.PRIVATE_IP_2 }}
        run: |
          # Conectar ao jump server (pública)
          ssh -i ~/.ssh/blume_key.pem -t ubuntu@$PUBLIC_IP << 'EOF'
            # Adicionar as chaves das máquinas privadas ao known_hosts
            ssh-keyscan -H $BACKEND_IP_1 >> ~/.ssh/known_hosts
            ssh-keyscan -H $BACKEND_IP_2 >> ~/.ssh/known_hosts
            chmod 600 ~/.ssh/known_hosts

            # Conectar à máquina privada 1
            ssh -i ~/.ssh/blume_key.pem -t ubuntu@$BACKEND_IP_1 << 'PRIVATE_EOF'
              sudo docker ps -a --filter ancestor=victorlcdpaula/backend-neos:latest -q | xargs -r sudo docker stop
              sudo docker ps -a --filter ancestor=victorlcdpaula/backend-neos:latest -q | xargs -r sudo docker rm
              sudo docker pull victorlcdpaula/backend-neos:latest
              sudo docker run -d -p 8080:8080 victorlcdpaula/backend-neos:latest
            PRIVATE_EOF

            # Conectar à máquina privada 2
            ssh -i ~/.ssh/blume_key.pem -t ubuntu@$BACKEND_IP_2 << 'PRIVATE_EOF'
              sudo docker ps -a --filter ancestor=victorlcdpaula/backend-neos:latest -q | xargs -r sudo docker stop
              sudo docker ps -a --filter ancestor=victorlcdpaula/backend-neos:latest -q | xargs -r sudo docker rm
              sudo docker pull victorlcdpaula/backend-neos:latest
              sudo docker run -d -p 8080:8080 victorlcdpaula/backend-neos:latest
            PRIVATE_EOF
          EOF

      - name: Clean up private key
        run: |
          rm -f ~/.ssh/blume_key.pem
